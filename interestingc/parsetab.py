
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xd1\x11\xf1\xa3\xa4?\xd9BLNT\x8d&^u\xe5'
    
_lr_action_items = {'times_sign':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,26,27,28,29,30,31,32,33,34,35,36,37,],[-12,-9,-4,-1,-11,-22,-3,-7,-5,-8,-2,-12,-12,19,-6,-26,-10,19,19,-12,-12,-12,-12,-12,-13,19,19,19,19,-12,19,-12,-12,19,19,19,]),'reverse_solidus':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,26,27,28,29,30,31,32,33,34,35,36,37,],[-12,-9,-4,-1,-11,-22,-3,-7,-5,-8,-2,-12,-12,20,-6,-26,-10,20,20,-12,-12,-12,-12,-12,-13,20,20,20,20,-12,20,-12,-12,20,20,20,]),'question_mark':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,26,27,28,29,30,31,32,33,34,35,36,37,],[-12,-9,-4,-1,-11,-22,-3,-7,-5,-8,-2,-12,-12,21,-6,-26,-10,21,21,-12,-12,-12,-12,-12,-13,21,21,21,21,-12,21,-12,-12,21,21,21,]),'decimal_number_literal':([0,11,12,19,20,21,22,24,31,33,34,],[15,15,15,15,15,15,15,15,15,15,15,]),'pipe':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,],[-12,-9,-4,-1,-11,-22,-3,-7,-5,-8,-2,-12,-12,23,-6,-26,-10,23,23,-12,-12,-12,-12,31,-12,-13,23,23,23,23,-12,23,-12,-12,23,23,23,]),'bang':([0,11,12,19,20,21,22,24,31,33,34,],[11,11,11,11,11,11,11,11,11,11,11,]),'open_paren':([0,11,12,19,20,21,22,24,31,33,34,],[12,12,12,12,12,12,12,12,12,12,12,]),'colon':([1,2,3,4,5,6,7,8,9,10,11,14,15,16,17,19,20,21,22,24,26,27,28,29,30,31,32,33,34,35,36,37,],[-9,-4,-1,-11,-22,-3,-7,-5,-8,-2,-12,-6,-26,-10,-14,-12,-12,-12,-12,-12,-13,-16,-18,34,-15,-12,-17,-12,-12,-20,-19,-21,]),'minus_sign':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,26,27,28,29,30,31,32,33,34,35,36,37,],[-12,-9,-4,-1,-11,-22,-3,-7,-5,-8,-2,-12,-12,24,-6,-26,-10,24,24,-12,-12,-12,-12,-12,-13,24,24,24,24,-12,24,-12,-12,24,24,24,]),'plus_sign':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,26,27,28,29,30,31,32,33,34,35,36,37,],[-12,-9,-4,-1,-11,-22,-3,-7,-5,-8,-2,-12,-12,22,-6,-26,-10,22,22,-12,-12,-12,-12,-12,-13,22,22,22,22,-12,22,-12,-12,22,22,22,]),'and_sign':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[-12,-9,-4,-1,-11,-22,-3,-7,-5,-8,-2,-12,-12,25,-6,-26,-10,25,25,-12,-12,-12,-12,-12,33,-13,25,25,25,25,-12,25,-12,-12,25,25,25,]),'close_paren':([1,2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,19,20,22,24,26,27,28,30,31,32,33,34,35,36,37,],[-9,-4,-1,-11,-22,-3,-7,-5,-8,-2,-12,-12,-6,-26,-10,-14,26,-12,-12,-12,-12,-13,-16,-18,-15,-12,-17,-12,-12,-20,-19,-21,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,19,20,22,24,26,27,28,30,31,32,33,34,35,36,37,],[-12,-9,-4,-1,-11,-22,-3,-7,-5,-8,-2,-12,0,-6,-26,-10,-14,-12,-12,-12,-12,-13,-16,-18,-15,-12,-17,-12,-12,-20,-19,-21,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'And':([0,11,12,19,20,21,22,24,31,33,34,],[14,14,14,14,14,14,14,14,14,14,14,]),'Division':([0,11,12,19,20,21,22,24,31,33,34,],[6,6,6,6,6,6,6,6,6,6,6,]),'TernaryExpression':([0,11,12,19,20,21,22,24,31,33,34,],[1,1,1,1,1,1,1,1,1,1,1,]),'Sum':([0,11,12,19,20,21,22,24,31,33,34,],[2,2,2,2,2,2,2,2,2,2,2,]),'Not':([0,11,12,19,20,21,22,24,31,33,34,],[9,9,9,9,9,9,9,9,9,9,9,]),'Literal':([0,11,12,19,20,21,22,24,31,33,34,],[3,3,3,3,3,3,3,3,3,3,3,]),'ExpressionEnclosedInParens':([0,11,12,19,20,21,22,24,31,33,34,],[16,16,16,16,16,16,16,16,16,16,16,]),'Subtraction':([0,11,12,19,20,21,22,24,31,33,34,],[8,8,8,8,8,8,8,8,8,8,8,]),'NoExpression':([0,11,12,19,20,21,22,24,31,33,34,],[4,4,4,4,4,4,4,4,4,4,4,]),'Multiplication':([0,11,12,19,20,21,22,24,31,33,34,],[10,10,10,10,10,10,10,10,10,10,10,]),'DecimalNumberLiteral':([0,11,12,19,20,21,22,24,31,33,34,],[5,5,5,5,5,5,5,5,5,5,5,]),'Expression':([0,11,12,19,20,21,22,24,31,33,34,],[13,17,18,27,28,29,30,32,35,36,37,]),'Or':([0,11,12,19,20,21,22,24,31,33,34,],[7,7,7,7,7,7,7,7,7,7,7,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Expression","S'",1,None,None,None),
  ('Expression -> Literal','Expression',1,'p_Expression','parser.py',18),
  ('Expression -> Multiplication','Expression',1,'p_Expression','parser.py',19),
  ('Expression -> Division','Expression',1,'p_Expression','parser.py',20),
  ('Expression -> Sum','Expression',1,'p_Expression','parser.py',21),
  ('Expression -> Subtraction','Expression',1,'p_Expression','parser.py',22),
  ('Expression -> And','Expression',1,'p_Expression','parser.py',23),
  ('Expression -> Or','Expression',1,'p_Expression','parser.py',24),
  ('Expression -> Not','Expression',1,'p_Expression','parser.py',25),
  ('Expression -> TernaryExpression','Expression',1,'p_Expression','parser.py',26),
  ('Expression -> ExpressionEnclosedInParens','Expression',1,'p_Expression','parser.py',27),
  ('Expression -> NoExpression','Expression',1,'p_Expression','parser.py',28),
  ('NoExpression -> <empty>','NoExpression',0,'p_NoExpression','parser.py',32),
  ('ExpressionEnclosedInParens -> open_paren Expression close_paren','ExpressionEnclosedInParens',3,'p_ExpressionEnclosedInParens','parser.py',36),
  ('Not -> bang Expression','Not',2,'p_Not','parser.py',41),
  ('Sum -> Expression plus_sign Expression','Sum',3,'p_Sum','parser.py',46),
  ('Multiplication -> Expression times_sign Expression','Multiplication',3,'p_Multiplication','parser.py',50),
  ('Subtraction -> Expression minus_sign Expression','Subtraction',3,'p_Subtraction','parser.py',54),
  ('Division -> Expression reverse_solidus Expression','Division',3,'p_Division','parser.py',58),
  ('And -> Expression and_sign and_sign Expression','And',4,'p_And','parser.py',62),
  ('Or -> Expression pipe pipe Expression','Or',4,'p_Or','parser.py',66),
  ('TernaryExpression -> Expression question_mark Expression colon Expression','TernaryExpression',5,'p_TernaryExpression','parser.py',71),
  ('Literal -> DecimalNumberLiteral','Literal',1,'p_Literal','parser.py',80),
  ('Term -> Literal','Term',1,'p_Term','parser.py',84),
  ('Term -> Identifier','Term',1,'p_Term','parser.py',85),
  ('Identifier -> identifier','Identifier',1,'p_Identifier','parser.py',89),
  ('DecimalNumberLiteral -> decimal_number_literal','DecimalNumberLiteral',1,'p_DecimalNumberLiteral','parser.py',93),
]
